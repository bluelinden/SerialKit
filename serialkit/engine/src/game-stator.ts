export default class GameStator {
	currentDimension: Dimension | undefined;
	currentPage: Page | undefined;
	private variables: Record<string, number | string> = {};
	dimensions: Record<string, Dimension> = {};
	pages: Record<string, Page> = {};
	pageArray: string[] = [];

	setGlobalVariable(variableId: string, value: number | string) {
		this.variables[variableId] = value;
	}

	getGlobalVariable(variableId: string) {
		return this.variables[variableId];
	}

	getPage(pageId: string) {
		return this.pages[pageId];
	}

	writeNextPage(pageId: string, parameters?: Record<string, string | number>) {
		this.pageArray.push(pageId);
		this.currentPage = this.getPage(pageId);
	}

	eraseHistory(){
		if (this.currentPage)
		this.pageArray = [this.currentPage.id];
	}

	setPage(pageId: string, parameters?: Record<string, string | number>) {
		this.currentPage = this.getPage(pageId);
	}

	nextPage() {
		const nextPage = this.pageArray.indexOf(this.currentPage!.id) + 1;

		if (nextPage) {
			this.setPage(this.pageArray[nextPage]);
		} else {
			throw new Error('No page with a higher index than the current page exists.');
		}
	}

	previousPage() {
		const previousPage = this.pageArray.indexOf(this.currentPage!.id) - 1;

		if (previousPage) {
			this.setPage(this.pageArray[previousPage]);
		} else {
			throw new Error('No page with a lower index than the current page exists.');
		}
	}
}

export class Dimension {
	name: string = "SerialKit Dimension";
	private variables: Record<string, number | string> = {};
	private pages: Record<string, Page> = {};
	setVariable(variableId: string, value: number | string) {
		this.variables[variableId] = value;
	}

	registerPage(page: PageConfig) {
		this.pages[page.id] = new Page(page);
	}

	getVariable(variableId: string) {
		return this.variables[variableId];
	}
}

export class Page {
	id: string = "";
	private text: string =
		"SerialKit autogenerated a placeholder for this page since you didn't input any text.";

	renderText?: (text: string, parameters: Record<string, string | number>) => string;
	fields: {
		id: string;
		type: "string" | "number";
		value: string | number;
		maxLength?: number;
		description: string;
		/**
		 * valid JS keyboard event.key value.
		 */
		moveFocusKey?: string;
	}[] = [];
	options?: string[];
	optionHandler?: (
		optionId: string,
		fields: Record<string, string | number>
	) => void;
	nextPageHandler?: (fields?: Record<string, string | number>) => string;



	constructor(config: PageConfig) {
		Object.assign(this, config);
	}
}

interface PageConfig {
	id: string;
	/**
	 * use `[!labeltext](skf name="FIELDNAME")` as a placeholder for any custom field you'd like to inject into the text. All text is formatted as markdown and rendered as HTML. all input HTML is escaped.
	 */
	text: string;
	variables: Record<string, number | string>;
	fields: {
		id: string;
		type: "string" | "number";
		value: string | number;
		description: string;
		spaceMovesFocus: boolean;
	}[];
	nextPageHandler?: (values: string[]) => void;
	options?: string[];
	optionHandler?: (optionId: string) => void;
}
